//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GodotHub.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("GodotHub.Resources.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates a local config for the folder.
        /// </summary>
        internal static string CreateLocalConfigurationCommandDescription {
            get {
                return ResourceManager.GetString("CreateLocalConfigurationCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the version to use in our local config.
        /// </summary>
        internal static string CreateLocalConfigurationCommandUseVersionOptionDescription {
            get {
                return ResourceManager.GetString("CreateLocalConfigurationCommandUseVersionOptionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checking availability of {0} (mono = {1}) (headless = {2}).
        /// </summary>
        internal static string InstallCommandCheckAvailabilityMessage {
            get {
                return ResourceManager.GetString("InstallCommandCheckAvailabilityMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installs a version of Godot.
        /// </summary>
        internal static string InstallCommandDescription {
            get {
                return ResourceManager.GetString("InstallCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Downloading.
        /// </summary>
        internal static string InstallCommandDownloadingMessage {
            get {
                return ResourceManager.GetString("InstallCommandDownloadingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install a headless version.
        /// </summary>
        internal static string InstallCommandHeadlessOptionDescription {
            get {
                return ResourceManager.GetString("InstallCommandHeadlessOptionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version {0} (mono = {1}) (headless = {2}) installed.
        /// </summary>
        internal static string InstallCommandInstallationCompleteMessage {
            get {
                return ResourceManager.GetString("InstallCommandInstallationCompleteMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Latest {0} version is {1}.
        /// </summary>
        internal static string InstallCommandLatestVersionMessage {
            get {
                return ResourceManager.GetString("InstallCommandLatestVersionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version {0} does not have a package with mono.
        /// </summary>
        internal static string InstallCommandMonoNotFoundMessage {
            get {
                return ResourceManager.GetString("InstallCommandMonoNotFoundMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install a version that has mono.
        /// </summary>
        internal static string InstallCommandMonoOptionDescription {
            get {
                return ResourceManager.GetString("InstallCommandMonoOptionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find a package for {0}-{1}.
        /// </summary>
        internal static string InstallCommandPackageNotFoundMessage {
            get {
                return ResourceManager.GetString("InstallCommandPackageNotFoundMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Also check for unstable versions.
        /// </summary>
        internal static string InstallCommandUnstableOptionDescription {
            get {
                return ResourceManager.GetString("InstallCommandUnstableOptionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version to install.
        /// </summary>
        internal static string InstallCommandVersionArgumentDescription {
            get {
                return ResourceManager.GetString("InstallCommandVersionArgumentDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version {0} was not found on the repository.
        /// </summary>
        internal static string InstallCommandVersionNotFoundMessage {
            get {
                return ResourceManager.GetString("InstallCommandVersionNotFoundMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lists installed (and available) Godot.
        /// </summary>
        internal static string ListCommandDescription {
            get {
                return ResourceManager.GetString("ListCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  - {0} (external).
        /// </summary>
        internal static string ListCommandExternalVersionFormat {
            get {
                return ResourceManager.GetString("ListCommandExternalVersionFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installed Godot Versions
        ///.
        /// </summary>
        internal static string ListCommandInstalledVersionsHeader {
            get {
                return ResourceManager.GetString("ListCommandInstalledVersionsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  - {0}.
        /// </summary>
        internal static string ListCommandLocalVersionFormat {
            get {
                return ResourceManager.GetString("ListCommandLocalVersionFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List also the Godot versions available online.
        /// </summary>
        internal static string ListCommandOnlineOptionDescription {
            get {
                return ResourceManager.GetString("ListCommandOnlineOptionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  - {0} (mono available = {1}).
        /// </summary>
        internal static string ListCommandOnlineVersionFormat {
            get {
                return ResourceManager.GetString("ListCommandOnlineVersionFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Available Godot Versions
        ///.
        /// </summary>
        internal static string ListCommandOnlineVersionsHeader {
            get {
                return ResourceManager.GetString("ListCommandOnlineVersionsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Migrates the old .godot-version file.
        /// </summary>
        internal static string LocalConfigurationCommandMigrateOptionDescription {
            get {
                return ResourceManager.GetString("LocalConfigurationCommandMigrateOptionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Registered {0} as {1}.
        /// </summary>
        internal static string RegisterCommandCompletedMessage {
            get {
                return ResourceManager.GetString("RegisterCommandCompletedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to the custom version identifier to use (i.e. X.Y-dev).
        /// </summary>
        internal static string RegisterCommandCustomVersionArgumentDescription {
            get {
                return ResourceManager.GetString("RegisterCommandCustomVersionArgumentDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to register an external godot installation.
        /// </summary>
        internal static string RegisterCommandDescription {
            get {
                return ResourceManager.GetString("RegisterCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to the path to the godot installation.
        /// </summary>
        internal static string RegisterCommandPathArgumentDescription {
            get {
                return ResourceManager.GetString("RegisterCommandPathArgumentDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Godot installer and version manager.
        /// </summary>
        internal static string RootCommandDescription {
            get {
                return ResourceManager.GetString("RootCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find a version to run. Specify it with -u &lt;version&gt; parameter.
        /// </summary>
        internal static string RunCommandCannotFindVersionMessage {
            get {
                return ResourceManager.GetString("RunCommandCannotFindVersionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command line to pass to godot.
        /// </summary>
        internal static string RunCommandCmdLineArgumentDescription {
            get {
                return ResourceManager.GetString("RunCommandCmdLineArgumentDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lanches Godot in the current directory.
        /// </summary>
        internal static string RunCommandDescription {
            get {
                return ResourceManager.GetString("RunCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version to launch.
        /// </summary>
        internal static string RunCommandUseVersionOptionDescription {
            get {
                return ResourceManager.GetString("RunCommandUseVersionOptionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstall a specific godot version.
        /// </summary>
        internal static string UninstallCommandDescription {
            get {
                return ResourceManager.GetString("UninstallCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Godot {0} uninstalled..
        /// </summary>
        internal static string UninstallCommandUninstallCompleteMessage {
            get {
                return ResourceManager.GetString("UninstallCommandUninstallCompleteMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstalling {0}.
        /// </summary>
        internal static string UninstallCommandUninstallingMessage {
            get {
                return ResourceManager.GetString("UninstallCommandUninstallingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version to install.
        /// </summary>
        internal static string UninstallCommandVersionArgumentDescription {
            get {
                return ResourceManager.GetString("UninstallCommandVersionArgumentDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to the custom version to unregister (i.e. X.Y-dev).
        /// </summary>
        internal static string UnregisterCommandCustomVersionArgumentDescription {
            get {
                return ResourceManager.GetString("UnregisterCommandCustomVersionArgumentDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to unregisters an external godot installation.
        /// </summary>
        internal static string UnregisterCommandDescription {
            get {
                return ResourceManager.GetString("UnregisterCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unregistered {0}.
        /// </summary>
        internal static string UnregisterCommandUnregisterCompleteMessage {
            get {
                return ResourceManager.GetString("UnregisterCommandUnregisterCompleteMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version {0} does not correspond to an external version.
        /// </summary>
        internal static string UnregisterCommandVersionNotExternalMessage {
            get {
                return ResourceManager.GetString("UnregisterCommandVersionNotExternalMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot determine architecture.
        /// </summary>
        internal static string UnsupportedArchitectureExceptionDefaultMessage {
            get {
                return ResourceManager.GetString("UnsupportedArchitectureExceptionDefaultMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot determine architecture for package {0}.
        /// </summary>
        internal static string UnsupportedArchitectureExceptionMessageWithParameter {
            get {
                return ResourceManager.GetString("UnsupportedArchitectureExceptionMessageWithParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsupported OS.
        /// </summary>
        internal static string UnsupportedOSExceptionMessage {
            get {
                return ResourceManager.GetString("UnsupportedOSExceptionMessage", resourceCulture);
            }
        }
    }
}
