name: CI/CD

on:
  push:
   tags: "v*"
   branches: [main, develop, feature/*, release/*]
  pull_request:
    branches: [main, develop]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build ./GodotHub/GodotHub.csproj --no-restore
      - name: Test
        run: dotnet test ./GodotHub.Tests/GodotHub.Tests.csproj --verbosity normal

  package-standalone:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        runtime: [win-x64, linux-x64] # osx-x64
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
        with:
          useConfigFile: true
      - name: Restore dependencies
        run: dotnet restore
      - name: Publish
        run: dotnet publish ./GodotHub/GodotHub.csproj -c Release -r ${{ matrix.runtime }} --self-contained -p:PublishReadyToRun=true -p:PublishSingleFile=true -p:PublishTrimmed=true
      - name: Zip all
        run: |
          if [ "${{ matrix.runtime }}" == "win-x64" ]; then
            7z a -tzip "godot-hub-${{ matrix.runtime }}.zip" ./GodotHub/bin/Release/net6.0/${{ matrix.runtime }}/publish/*
          else
            tar czvf "godot-hub-${{ matrix.runtime }}.tar.gz" ./GodotHub/bin/Release/net6.0/${{ matrix.runtime }}/publish/*
          fi
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: godot-hub-${{ steps.gitversion.outputs.semVer }}
          path: |
            *.zip
            *.tar.gz

  package-dotnet-tool:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
        with:
          useConfigFile: true
      - name: Restore dependencies
        run: dotnet restore
      - name: Pack
        run: dotnet pack ./GodotHub/GodotHub.csproj -c Release
      - name: Archive nupkg artifacts
        uses: actions/upload-artifact@v2
        with:
          name: godot-hub-${{ steps.gitversion.outputs.semVer }}
          path: |
            ./GodotHub/bin/Release/*.nupkg

  release:
    needs: [package-standalone, package-dotnet-tool]
    if: startsWith(github.ref, 'refs/tags/')
    
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
        with:
          useConfigFile: true
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Downlad artifacts
        id: download
        uses: actions/download-artifact@v2
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            ${{steps.download.outputs.download-path}}/**/*.zip
            ${{steps.download.outputs.download-path}}/**/*.tar.gz
            ${{steps.download.outputs.download-path}}/**/*.nupkg
      - name: Publish to NuGet
        run: dotnet nuget push ${{steps.download.outputs.download-path}}/**/*.nupkg --source https://api.nuget.org/v3/index.json --skip-duplicate --api-key ${{ secrets.NUGET_KEY }}
